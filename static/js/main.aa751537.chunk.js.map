{"version":3,"sources":["useWaiter.js","App.js","serviceWorker.js","index.js"],"names":["getTime","Date","useWaiter","requestCreator","requestParams","id","useRef","params","response","useState","isPending","setPending","isResolved","setResolved","isRejected","setRejected","isCompleted","setCompleted","isRefreshing","setRefreshing","startTime","setStartTime","endTime","setEndTime","lastModified","setLastModified","request","setRequest","error","setError","runnerParams","a","current","waiterId","console","log","refresh","data","callWaiter","useCallback","callbackParams","requestRunner","useEffect","elapsedTime","Button","styled","button","WaiterDiv","div","testRequest","Promise","resolve","reject","setTimeout","Math","floor","random","success","message","TestWaiter","param1","style","margin","width","padding","source","display","verticalAlign","JSON","stringify","preWaiterId","onClick","prevWaiterId","border","toString","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"qNACA,SAASA,IACP,OAAO,IAAIC,MAAOD,UAGb,SAASE,EAAUC,EAAgBC,GAExC,IAAMC,EAAKC,iBAAO,MACZC,EAASD,iBAAO,MAChBE,EAAWF,iBAAO,MAJ+B,EAOvBG,oBAAS,GAPc,mBAOhDC,EAPgD,KAOrCC,EAPqC,OAQrBF,oBAAS,GARY,mBAQhDG,EARgD,KAQpCC,EARoC,OASrBJ,oBAAS,GATY,mBAShDK,EATgD,KASpCC,EAToC,OAUnBN,oBAAS,GAVU,mBAUhDO,EAVgD,KAUnCC,EAVmC,OAWjBR,oBAAS,GAXQ,mBAWhDS,EAXgD,KAWlCC,EAXkC,OAcrBV,mBAAS,MAdY,mBAchDW,EAdgD,KAcrCC,EAdqC,OAezBZ,mBAAS,MAfgB,mBAehDa,EAfgD,KAevCC,EAfuC,OAgBfd,mBAAS,MAhBM,mBAgBhDe,EAhBgD,KAgBlCC,EAhBkC,OAmBzBhB,mBAAS,MAnBgB,mBAmBhDiB,EAnBgD,KAmBvCC,EAnBuC,OAoB7BlB,mBAAS,MApBoB,mBAoBhDmB,EApBgD,KAoBzCC,EApByC,iDAsBvD,WAA6BC,GAA7B,qBAAAC,EAAA,6DACExB,EAAOyB,QAAUF,EACXG,EAAW5B,EAAG2B,QAAU,EAC9B3B,EAAG2B,QAAUC,EAHf,SAMUP,EAAUvB,IAEhB+B,QAAQC,IAAI,cAAe3B,EAASwB,SACpCE,QAAQC,IAAI,gBAAiBvB,GACvBwB,IAAY5B,EAASwB,QAC3BE,QAAQC,IAAI,aAAcC,GAC1BjB,EAAciB,GAGdT,EAAWD,GACXG,EAAS,MAGTlB,GAAW,GACXE,GAAY,GACZE,GAAY,GACZE,GAAa,GAGbI,EAAarB,KACbuB,EAAW,MACXE,EAAgBzB,KA3BpB,UA6BuB0B,EA7BvB,WA6BUW,EA7BV,OA8BQJ,IAAa5B,EAAG2B,QA9BxB,mDAkCIxB,EAASwB,QAAUK,EACnBxB,GAAY,GAnChB,qDAqCQoB,IAAa5B,EAAG2B,QArCxB,mDAyCIxB,EAASwB,QAAU,KACnBH,EAAS,EAAD,IACRd,GAAY,GA3ChB,QA+CEJ,GAAW,GACXM,GAAa,GACbE,GAAc,GACdI,EAAWvB,KACXyB,EAAgBzB,KAnDlB,2DAtBuD,sBA4EvD,IAAMsC,EAAaC,uBAAY,SAACC,IA5EuB,oCA6ErDC,CAAcD,KACb,IAMH,OAJAE,qBAAU,WACRJ,EAAWlC,KACV,CAACkC,IAEG,CACLA,aACA/B,OAAQA,EAAOyB,QAEf3B,GAAIA,EAAG2B,QACPN,UACAlB,SAAUA,EAASwB,QACnBJ,QAEAlB,YACAE,aACAE,aACAE,cACAE,eAEAM,eACAJ,YACAE,UACAqB,YAAarB,EAAUA,EAAUF,EAAY,M,0YCtGjD,IAAMwB,EAASC,IAAOC,OAAV,KAUNC,EAAYF,IAAOG,IAAV,KAGJ,YAA4C,IAAzCtC,EAAwC,EAAxCA,UAAWE,EAA6B,EAA7BA,WAAYE,EAAiB,EAAjBA,WAC/B,OAAIJ,EACK,SAELE,EACK,QAELE,EACK,MAEF,WAGK,YAA4C,IAAzCJ,EAAwC,EAAxCA,UAAWE,EAA6B,EAA7BA,WAAYE,EAAiB,EAAjBA,WACtC,OAAIJ,EACK,SAELE,EACK,QAELE,EACK,MAEF,WAKb,SAASmC,IACP,OAAO,IAAIC,SACT,SAACC,EAASC,GACRC,YAAW,WACGC,KAAKC,MAAsB,GAAhBD,KAAKE,UAElB,IAAM,EAKhBL,EAAQ,CAAEM,SAAS,IAJjBL,EAAO,CAAEM,QAAS,sBAKnB,QAMT,SAASC,IAAc,IAAD,EAmBhBzD,EAAU+C,EAAa,CAAEW,OAAQ,UAjBnCvD,EAFkB,EAElBA,GACAE,EAHkB,EAGlBA,OAEA+B,EALkB,EAKlBA,WACA9B,EANkB,EAMlBA,SACAoB,EAPkB,EAOlBA,MAEAlB,EATkB,EASlBA,UACAE,EAVkB,EAUlBA,WACAE,EAXkB,EAWlBA,WACAE,EAZkB,EAYlBA,YACAE,EAbkB,EAalBA,aAEAE,EAfkB,EAelBA,UACAE,EAhBkB,EAgBlBA,QACAqB,EAjBkB,EAiBlBA,YACAnB,EAlBkB,EAkBlBA,aAGF,OACE,yBAAKqC,MAAO,CACVC,OAAQ,YACRC,MAAO,QACPC,QAAS,SAET,4CACA,0FACA,6BACA,6BACA,6BACA,2CACA,6BACH,kBAAC,IAAD,CACCC,OAAM,ydA6BJ,2CACA,yBAAKJ,MAAO,CACVE,MAAO,MACPG,QAAS,eACTF,QAAS,OACTG,cAAe,QAJjB,2CAO2CC,KAAKC,UAAU,CAACC,YAAajE,IAPxE,IAQE,6BACA,6BACA,kBAACuC,EAAD,CAAQ2B,QAAS,kBAAMjC,EAAW,CAAEkC,aAAcnE,MAAlD,uBAGA,6BACA,6BAEA,kBAAC0C,EAAD,CACErC,UAAWA,EACXE,WAAYA,EACZE,WAAYA,GAEZJ,GAAa,aACbE,GAAc,gBACdE,GAAc,eAChB,6BACA,6BATA,WAUUsD,KAAKC,UAAU9D,GACzB,6BACA,6BACEK,GAAc,2CAAiBwD,KAAKC,UAAU7D,IAC9CM,GAAc,wCAAcsD,KAAKC,UAAUzC,MAI/C,yBAAKiC,MAAO,CACVE,MAAO,MACPG,QAAS,eACTF,QAAS,OACTS,OAAQ,mBAGR,oCAAUL,KAAKC,UAAUhE,IACzB,wCAAc+D,KAAKC,UAAU9D,IAC7B,6BACA,0CAAgB6D,KAAKC,UAAU7D,IAC/B,uCAAa4D,KAAKC,UAAUzC,IAC5B,6BACA,2CAAiBlB,EAAUgE,YAC3B,4CAAkB9D,EAAW8D,YAC7B,4CAAkB5D,EAAW4D,YAC7B,6CAAmB1D,EAAY0D,YAC/B,8CAAoBxD,EAAawD,YACjC,6BACA,2CAAiBtD,GACjB,yCAAeE,GACf,6CAAmBqB,GACnB,8CAAoBnB,KAcbmD,MARf,WACE,OACE,6BACE,kBAAChB,EAAD,QCtLciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/D,GACLM,QAAQN,MAAMA,EAAM8B,a","file":"static/js/main.aa751537.chunk.js","sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\nfunction getTime() {\n  return new Date().getTime()\n}\n\nexport function useWaiter(requestCreator, requestParams) {\n  // mutables\n  const id = useRef(null);\n  const params = useRef(null);\n  const response = useRef(null);\n\n  // waiter lifecyle\n  const [isPending, setPending] = useState(false);\n  const [isResolved, setResolved] = useState(false);\n  const [isRejected, setRejected] = useState(false);\n  const [isCompleted, setCompleted] = useState(false);\n  const [isRefreshing, setRefreshing] = useState(false);\n\n  // waiter timestamps\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [lastModified, setLastModified] = useState(null);\n\n  // waiter request data\n  const [request, setRequest] = useState(null);\n  const [error, setError] = useState(null);\n\n  async function requestRunner(runnerParams) {\n    params.current = runnerParams;\n    const waiterId = id.current + 1;\n    id.current = waiterId;\n\n    try {\n      const request = requestCreator();\n      // if we have a response already, we're refreshing\n      console.log('response = ', response.current)\n      console.log('isResolved = ', isResolved)\n      const refresh = !!response.current\n      console.log('refresh = ', refresh)\n      setRefreshing(refresh)\n\n      // waiter request init\n      setRequest(request);\n      setError(null);\n\n      // waiter lifecycle init\n      setPending(true);\n      setResolved(false);\n      setRejected(false);\n      setCompleted(false);\n\n      // waiter timestamps init\n      setStartTime(getTime());\n      setEndTime(null);\n      setLastModified(getTime());\n\n      const data = await request;\n      if (waiterId !== id.current) {\n        return;\n      }\n      // waiter success changes\n      response.current = data;\n      setResolved(true);\n    } catch (e) {\n      if (waiterId !== id.current) {\n        return;\n      }\n      // request error changes\n      response.current = null\n      setError(e);\n      setRejected(true);\n    }\n\n    // waiter completed changes\n    setPending(false);\n    setCompleted(true);\n    setRefreshing(false);\n    setEndTime(getTime());\n    setLastModified(getTime());\n  }\n\n  const callWaiter = useCallback((callbackParams) => {\n    requestRunner(callbackParams);\n  }, []);\n\n  useEffect(() => {\n    callWaiter(requestParams);\n  }, [callWaiter]);\n\n  return {\n    callWaiter,\n    params: params.current,\n\n    id: id.current,\n    request,\n    response: response.current,\n    error,\n\n    isPending,\n    isResolved,\n    isRejected,\n    isCompleted,\n    isRefreshing,\n\n    lastModified,\n    startTime,\n    endTime,\n    elapsedTime: endTime ? endTime - startTime : null,\n  };\n}\n","import React from 'react';\nimport styled from 'styled-components'\nimport ReactMarkdown from 'react-markdown';\nimport { useWaiter } from './useWaiter'\n\nconst Button = styled.button`\n  cursor: pointer;\n  padding: 8px 20px;\n  background: none;\n  font-size: 16px;\n  :hover {\n     background: #efefef;\n  }\n`\n\nconst WaiterDiv = styled.div`\n  padding: 20px;\n  margin-bottom: 10px;\n  color: ${({ isPending, isResolved, isRejected }) => {\n      if (isPending) {\n        return 'orange';\n      }\n      if (isResolved) {\n        return 'green';\n      }\n      if (isRejected) {\n        return 'red';\n      }\n      return 'black';\n    }};\n  border: 1px solid #ccc;\n  border-color: ${({ isPending, isResolved, isRejected }) => {\n      if (isPending) {\n        return 'orange';\n      }\n      if (isResolved) {\n        return 'green';\n      }\n      if (isRejected) {\n        return 'red';\n      }\n      return 'black';\n    }};\n  display: block;\n`\n\nfunction testRequest() {\n  return new Promise(\n    (resolve, reject) => {\n      setTimeout(() => {\n        const num = Math.floor(Math.random() * 10)\n\n        if (num % 2 === 1) {\n          reject({ message: 'Sorry, rejected'})\n          return\n        }\n\n        resolve({ success: true })\n      }, 5000)\n    }\n  )\n}\n\n\nfunction TestWaiter() {\n  const {\n    id,\n    params,\n\n    callWaiter,\n    response,\n    error,\n\n    isPending,\n    isResolved,\n    isRejected,\n    isCompleted,\n    isRefreshing,\n\n    startTime,\n    endTime,\n    elapsedTime,\n    lastModified\n  } = useWaiter(testRequest, { param1: 'hello' })\n\n  return (\n    <div style={{\n      margin: '20px auto',\n      width: '900px',\n      padding: '20px',\n    }}>\n      <h1>react-waiter</h1>\n      <div>Managing the promise lifecyle for you react applications.</div>\n      <br />\n      <hr />\n      <br />\n      <h2>useWaiter()</h2>\n      <div>\n   <ReactMarkdown\n    source={`\n      function myRequest(params) {\n        return apiRequest(params)\n      }\n\n      const myWaiter = usewaiter( myrequest, { param1: \"hello\" })\n\n      const {\n        id,\n        params,\n\n        callWaiter,\n        response,\n        error,\n\n        isPending,\n        isResolved,\n        isRejected,\n        isCompleted,\n        isRefreshing,\n\n        startTime,\n        endTime,\n        elapsedTime,\n        lastModified\n      } = myWaiter`}\n    />\n      </div>\n\n      <h2>Run example</h2>\n      <div style={{\n        width: '35%',\n        display: 'inline-block',\n        padding: '15px',\n        verticalAlign: 'top',\n      }}>\n\n        Button onClick with initiate callWaiter({JSON.stringify({preWaiterId: id})})\n        <br />\n        <br />\n        <Button onClick={() => callWaiter({ prevWaiterId: id })} >\n          Run with new params\n        </Button>\n        <br />\n        <br />\n\n        <WaiterDiv\n          isPending={isPending}\n          isResolved={isResolved}\n          isRejected={isRejected}\n        >\n        { isPending && '...working' }\n        { isResolved && 'Yes, success!' }\n        { isRejected && 'Oh no, error' }\n        <br />\n        <br />\n        params: { JSON.stringify(params) }\n        <br />\n        <br />\n        { isResolved && <span>response: {JSON.stringify(response)}</span> }\n        { isRejected && <span>error: {JSON.stringify(error)}</span> }\n\n        </WaiterDiv>\n      </div>\n      <div style={{\n        width: '55%',\n        display: 'inline-block',\n        padding: '15px',\n        border: 'solid 1px #ddd',\n\n      }}>\n        <div>id: {JSON.stringify(id)}</div>\n        <div>params: {JSON.stringify(params)}</div>\n        <br />\n        <div>response: {JSON.stringify(response)}</div>\n        <div>error: {JSON.stringify(error)}</div>\n        <br />\n        <div>isPending: {isPending.toString()}</div>\n        <div>isResolved: {isResolved.toString()}</div>\n        <div>isRejected: {isRejected.toString()}</div>\n        <div>isCompleted: {isCompleted.toString()}</div>\n        <div>isRefreshing: {isRefreshing.toString()}</div>\n        <br />\n        <div>startTime: {startTime}</div>\n        <div>endTime: {endTime}</div>\n        <div>elapsedTime: {elapsedTime}</div>\n        <div>lastModified: {lastModified}</div>\n      </div>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div>\n      <TestWaiter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}