{"version":3,"sources":["useWaiter.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["getTime","Date","useWaiter","requestCreator","requestParams","id","useRef","params","response","isCanceled","useState","request","setRequest","error","setError","isPending","setPending","isResolved","setResolved","isRejected","setRejected","isCompleted","setCompleted","isRefreshing","setRefreshing","startTime","setStartTime","endTime","setEndTime","lastModified","setLastModified","runnerParams","a","current","waiterId","refresh","data","callWaiter","useCallback","callbackParams","requestRunner","clearWaiter","cancelWaiter","useEffect","elapsedTime","Header","className","href","data-size","aria-label","alt","src","Button","styled","button","WaiterDiv","div","testRequest","Promise","resolve","reject","setTimeout","Math","floor","random","success","message","TestWaiter","param1","style","margin","width","padding","display","verticalAlign","onClick","prevWaiterId","JSON","stringify","source","border","toString","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.eecb5ab6.chunk.js","sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\nfunction getTime() {\n  return new Date().getTime()\n}\n\nexport function useWaiter(requestCreator, requestParams) {\n  // waiter request data\n  // mutables\n  const id = useRef(null);\n  const params = useRef(null);\n  const response = useRef(null);\n  const isCanceled = useRef(false);\n\n  const [request, setRequest] = useState(null);\n  const [error, setError] = useState(null);\n\n  // waiter lifecyle\n  const [isPending, setPending] = useState(false);\n  const [isResolved, setResolved] = useState(false);\n  const [isRejected, setRejected] = useState(false);\n  const [isCompleted, setCompleted] = useState(false);\n  const [isRefreshing, setRefreshing] = useState(false);\n\n  // waiter timestamps\n  const [startTime, setStartTime] = useState(null);\n  const [endTime, setEndTime] = useState(null);\n  const [lastModified, setLastModified] = useState(null);\n\n  async function requestRunner(runnerParams) {\n    isCanceled.current = false;\n    params.current = runnerParams;\n\n    const waiterId = id.current + 1;\n    id.current = waiterId;\n\n    try {\n      const request = requestCreator();\n      // if we have a response already, we're refreshing\n      const refresh = !!response.current;\n      setRefreshing(refresh);\n\n      // waiter request init\n      setRequest(request);\n      setError(null);\n\n      // waiter lifecycle init\n      setPending(true);\n      setResolved(false);\n      setRejected(false);\n      setCompleted(false);\n\n      // waiter timestamps init\n      setStartTime(getTime());\n      setEndTime(null);\n      setLastModified(getTime());\n\n      const data = await request;\n      if (waiterId !== id.current) {\n        return;\n      }\n\n      if (isCanceled.current) {\n        return;\n      }\n\n      // waiter success changes\n      response.current = data;\n      setResolved(true);\n    } catch (e) {\n      if (waiterId !== id.current) {\n        return;\n      }\n      if (isCanceled.current) {\n        return;\n      }\n      // request error changes\n      response.current = null;\n      setError(e);\n      setRejected(true);\n    }\n\n    // waiter completed changes\n    setPending(false);\n    setCompleted(true);\n    setRefreshing(false);\n    setEndTime(getTime());\n    setLastModified(getTime());\n  }\n\n  const callWaiter = useCallback((callbackParams) => {\n    requestRunner(callbackParams);\n  }, []);\n\n  const clearWaiter = useCallback(() => {\n    id.current = null\n    isCanceled.current =false\n    response.current = null\n    params.current = null\n\n    setError(null)\n    setRequest(null)\n\n    setPending(false)\n    setResolved(false)\n    setRejected(false)\n    setCompleted(false)\n    setRefreshing(false)\n\n    setStartTime(null)\n    setEndTime(null)\n    setLastModified(getTime())\n  }, []);\n\n  const cancelWaiter = useCallback(() => {\n    if (isCompleted) {\n      return\n    }\n    isCanceled.current = true\n    response.current = null\n\n    setRequest(null)\n    setError(null)\n\n    setPending(false)\n    setResolved(false)\n    setRejected(false)\n    setCompleted(false)\n    setRefreshing(false)\n\n    setStartTime(null)\n    setEndTime(null)\n    setLastModified(getTime())\n  }, [isCompleted, ]);\n\n  useEffect(() => {\n    callWaiter(requestParams);\n  }, [callWaiter]);\n\n  return {\n    callWaiter,\n    cancelWaiter,\n    clearWaiter,\n    params: params.current,\n\n    id: id.current,\n    request,\n    response: response.current,\n    error,\n\n    isPending,\n    isResolved,\n    isRejected,\n    isCompleted,\n    isRefreshing,\n    isCanceled: isCanceled.current,\n\n    lastModified,\n    startTime,\n    endTime,\n    elapsedTime: endTime ? endTime - startTime : null,\n  };\n}\n","import React from 'react';\n\nexport function Header() {\n  return (\n    <div>\n      <h1>\n        react-waiter\n        {' '}\n        {' '}\n        {' '}\n\n        <a className='github-button' href='https://github.com/billyxs/react-waiter' data-size='large' aria-label='Star billyxs/react-waiter on GitHub'>\n          Star\n        </a>\n      </h1>\n      <div>\n        Managing the promise lifecyle for you react applications.\n        <br />\n        <br />\n        <a href='https://npmjs.org/package/react-waiter'>\n          <img alt=\"npm\" src=\"https://img.shields.io/npm/v/react-waiter\" />\n        </a>\n        {' '}\n        <a href='https://travis-ci.org/billxys/react-waiter'>\n          <img src='https://travis-ci.org/billyxs/react-waiter.svg?branch=master' alt='travis build badge' />\n        </a>\n        {' '}\n        <a href=\"https://img.shields.io/npm/l/react-waiter?color=blue\">\n          <img alt=\"NPM\" src=\"https://img.shields.io/npm/l/react-waiter?color=blue&label=License\" />\n        </a>\n      </div>\n      <br />\n      <hr />\n    </div>\n  )\n}\n","import React from 'react';\nimport styled from 'styled-components'\nimport ReactMarkdown from 'react-markdown';\nimport { useWaiter } from './useWaiter'\nimport { Header } from './components/Header'\n\nconst Button = styled.button`\n  cursor: pointer;\n  padding: 8px 20px;\n  background: none;\n  font-size: 16px;\n  :hover {\n     background: #efefef;\n  }\n`\n\nconst WaiterDiv = styled.div`\n  padding: 20px;\n  margin-bottom: 10px;\n  color: ${({ isPending, isResolved, isRejected, isCanceled }) => {\n      if (isCanceled) {\n        return '#666';\n      }\n      if (isPending) {\n        return 'orange';\n      }\n      if (isResolved) {\n        return 'green';\n      }\n      if (isRejected) {\n        return 'red';\n      }\n      return 'black';\n    }};\n  border: 1px solid #ccc;\n  border-color: ${({ isPending, isResolved, isRejected, isCanceled }) => {\n      if (isCanceled) {\n        return '#666';\n      }\n      if (isPending) {\n        return 'orange';\n      }\n      if (isResolved) {\n        return 'green';\n      }\n      if (isRejected) {\n        return 'red';\n      }\n      return 'black';\n    }};\n  display: block;\n`\n\nfunction testRequest() {\n  return new Promise(\n    (resolve, reject) => {\n      setTimeout(() => {\n        const num = Math.floor(Math.random() * 10)\n\n        if (num % 2 === 1) {\n          reject({ message: 'Sorry, rejected'})\n          return\n        }\n\n        resolve({ success: true })\n      }, 5000)\n    }\n  )\n}\n\n\nfunction TestWaiter() {\n  const {\n    id,\n    params,\n\n    callWaiter,\n    cancelWaiter,\n    clearWaiter,\n\n    response,\n    error,\n\n    isPending,\n    isResolved,\n    isRejected,\n    isCompleted,\n    isRefreshing,\n    isCanceled,\n\n    startTime,\n    endTime,\n    elapsedTime,\n    lastModified\n  } = useWaiter(testRequest, { param1: 'hello' })\n\n  return (\n    <div style={{\n      margin: '20px auto',\n      width: '900px',\n      padding: '20px',\n    }}>\n      <Header />\n      <h2>Example</h2>\n      <div style={{\n        width: '35%',\n        display: 'inline-block',\n        padding: '15px',\n        verticalAlign: 'top',\n      }}>\n\n        <Button onClick={() => callWaiter({ prevWaiterId: id })} >\n          Run with new params\n        </Button>\n        <br />\n        <br />\n        <Button onClick={() => cancelWaiter()}>\n          Cancel Waiter\n        </Button>\n        <br />\n        <br />\n        <Button onClick={() => clearWaiter()}>\n          Clear Waiter\n        </Button>\n\n        <br />\n        <br />\n\n        <WaiterDiv\n          isPending={isPending}\n          isResolved={isResolved}\n          isRejected={isRejected}\n          isCanceled={isCanceled}\n        >\n          { isPending && '...working' }\n          { isResolved && 'Yes, success!' }\n          { isRejected && 'Oh no, error' }\n          { isCanceled && 'Hey, I got canceled!' }\n          <br />\n          <br />\n          params: { JSON.stringify(params) }\n          <br />\n          <br />\n          { isResolved && <span>response: {JSON.stringify(response)}</span> }\n          { isRejected && <span>error: {JSON.stringify(error)}</span> }\n\n        </WaiterDiv>\n        <br />\n        <h3>Button code</h3>\n        <ReactMarkdown\n          source={`\n    <Button onClick={\n        () => callWaiter({\n          prevWaiterId: id\n        })\n      }>\n      Run with new params\n    </Button>`}\n        />\n\n        <hr />\n        <ReactMarkdown\n          source={`\n    <Button onClick={cancelWaiter}>\n      Cancel Waiter\n    </Button>`}\n        />\n        <hr />\n        <ReactMarkdown\n          source={`\n    <Button onClick={clearWaiter}>\n      Clear Waiter\n    </Button>`}\n      />\n      </div>\n      <div style={{\n        width: '55%',\n        display: 'inline-block',\n        padding: '15px',\n        border: 'solid 1px #ddd',\n\n      }}>\n        <div>id: {JSON.stringify(id)}</div>\n        <div>params: {JSON.stringify(params)}</div>\n        <br />\n        <div>response: {JSON.stringify(response)}</div>\n        <div>error: {JSON.stringify(error)}</div>\n        <br />\n        <div>isPending: {isPending.toString()}</div>\n        <div>isResolved: {isResolved.toString()}</div>\n        <div>isRejected: {isRejected.toString()}</div>\n        <div>isCompleted: {isCompleted.toString()}</div>\n        <div>isRefreshing: {isRefreshing.toString()}</div>\n        <div>isCanceled: {isCanceled.toString()}</div>\n        <br />\n        <div>startTime: {startTime}</div>\n        <div>endTime: {endTime}</div>\n        <div>elapsedTime: {elapsedTime}</div>\n        <div>lastModified: {lastModified}</div>\n      </div>\n\n      <div>\n      <h2>useWaiter()</h2>\n      <div>\n   <ReactMarkdown\n    source={`\n      function myRequest(params) {\n        return apiRequest(params)\n      }\n\n      const myWaiter = usewaiter( myrequest, { param1: \"hello\" })\n\n      const {\n        callWaiter,\n        cancelWaiter,\n        clearWaiter,\n\n        id,\n        params,\n        request,\n        response,\n        error,\n\n        isPending,\n        isResolved,\n        isRejected,\n        isCompleted,\n        isRefreshing,\n        isCanceled,\n\n        startTime,\n        endTime,\n        elapsedTime,\n        lastModified\n      } = myWaiter`}\n    />\n      </div>\n\n      </div>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div>\n      <TestWaiter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}